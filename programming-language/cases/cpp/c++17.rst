========================================
C++17
========================================


.. contents:: 目錄


fold expression
========================================


std::size
========================================

* `cppreference - std::size <http://en.cppreference.com/w/cpp/iterator/size>`_

version 1 :

.. code-block:: cpp

    template <class C>
    constexpr auto size(const C& c) -> decltype(c.size())
    {
        return c.size();
    }


version 2 :

.. code-block:: cpp

    template <class T, std::size_t N>
    constexpr std::size_t size(const T (&array)[N]) noexcept
    {
        return N;
    }


Progress
========================================

* `C++17 progress update! (Oct 2015) <https://www.reddit.com/r/cpp/comments/3q4agc/c17_progress_update_oct_2015/>`_
* `Trip report: Fall 2015 ISO C++ standards meeting <http://herbsutter.com/2015/10/25/2568/>`_
* [GitHub] `Parallelism TS Editor's Report, post-Lenexa mailing <https://github.com/cplusplus/parallelism-ts>`_



參考
========================================

* `Wikipedia - C++17 <https://en.wikipedia.org/wiki/C++17>`_
* `fold expression <http://en.cppreference.com/w/cpp/language/fold>`_
* `C++ Status at the end of 2015 <http://www.bfilipek.com/2015/12/c-status-at-end-of-2015.html>`_
* `The C++17 Lands <http://fearlesscoder.blogspot.tw/2017/02/the-c17-lands.html>`_
* `A cheatsheet of modern C++ language and library features <https://github.com/AnthonyCalandra/modern-cpp-features>`_
* `Descriptions of C++17 features, presented mostly in "Tony Tables" <https://github.com/tvaneerd/cpp17_in_TTs>`_
* `What is Strict Aliasing and Why do we Care? <https://gist.github.com/shafik/848ae25ee209f698763cffee272a58f8>`_
    - C 有 effective type 和 compatible type，但是 C++ 沒有
    - C++ 有 dynamic type 和 similar type，但是 C 沒有
    - Type Punning
* `Standard C++: Current Status <https://isocpp.org/std/status>`_
* `C++17 fold expressions, precedence cheat sheet <https://twitter.com/RealBisqwit/status/948625792753393664>`_
